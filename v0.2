#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <iomanip>
#include <numeric>
#include <random>
#include <ctime>
#include <sstream>

using namespace std;

struct Studentas
{
    string vardas;
    string pavarde;
    vector<int> namuDarbai;
    int egzaminas;
};

double skaiciuotiVidurki(const vector<int>& namuDarbai)
{
    if (namuDarbai.empty())   ///tikriname, ar nd vektorius tuscias
        return 0;
    double suma = accumulate(namuDarbai.begin(), namuDarbai.end(), 0.0);
    return suma / namuDarbai.size();
}

double skaiciuotiMediana(const vector<int>& namuDarbai)
{
    if (namuDarbai.empty()) return 0; ///tikriname, ar nd vektorius tuscias?

    vector<int> tempNamuDarbai = namuDarbai;
    sort(tempNamuDarbai.begin(), tempNamuDarbai.end()); /// didejimo tvarka
    int dydis = tempNamuDarbai.size();
    if (dydis % 2 == 0)
    {
        return (tempNamuDarbai[dydis / 2 - 1] + tempNamuDarbai[dydis / 2]) / 2.0;
    }
    else
    {
        return tempNamuDarbai[dydis / 2];
    }
}

double skaiciuotiGalutini(const vector<int>& namuDarbai, int egzaminas, bool naudotiVidurki)
{
    if (naudotiVidurki)
    {
        double vidurkis = skaiciuotiVidurki(namuDarbai);
        return 0.4 * vidurkis + 0.6 * egzaminas;
    }
    else
    {
        return 0.4 * skaiciuotiMediana(namuDarbai) + 0.6 * egzaminas;
    }
}

void atsitiktiniai(Studentas& studentas)
{
    studentas.namuDarbai.resize(rand() % 10 + 1);
    for (int& pazymys : studentas.namuDarbai)
    {
        pazymys = rand() % 10 + 1;
    }
    studentas.egzaminas = rand() % 10 + 1;
}

void atsitiktiniaiStudentai(Studentas& studentas)
{
    const char* vardai[] = {"Anna", "Gloria", "Sofia", "Ugne", "Aina", "Guoda"};
    const char* pavardes[] = {"Mockute", "Liuc", "Mickute", "Macaite", "Miller", "Peleda"};
    int vardasIndex=rand()%6;
    int pavardeIndex=rand()%6;
    studentas.vardas=vardai[vardasIndex];
    studentas.pavarde=pavardes[pavardeIndex];
    atsitiktiniai(studentas);
}

void nuskaitymas(vector<Studentas>& studentai, const string& failoPavadinimas)
{
    ifstream fd(failoPavadinimas);
    if (!fd.is_open())
    {
        cout << "Nepavyko atidaryti failo." << endl;
        return;
    }

    Studentas studentas;
    string eilute;
    getline(fd, eilute); //praleidzia pirmaja eil.

    while (getline(fd, eilute)) {
        istringstream eilutesSrautas(eilute);
        eilutesSrautas >> studentas.vardas >> studentas.pavarde;

        int pazymys;
        studentas.namuDarbai.clear();
        while (eilutesSrautas >> pazymys && pazymys != -1) {
            studentas.namuDarbai.push_back(pazymys);
        }

        studentas.egzaminas = pazymys;
        studentai.push_back(studentas);
    }

    fd.close();
}


bool rusiuoti(const Studentas& a, const Studentas& b){
    return a.vardas < b.vardas;
}

void spausdinimas(const vector<Studentas>& studentai, const string& isvedimoFailas = "") {
    ostream& out = isvedimoFailas.empty() ? cout : *new ofstream(isvedimoFailas);

    ///rusiavimas atitinkamai pagal naudotojo pasirirnkima
    vector<Studentas> surusiuotiStudentai = studentai;
    sort(surusiuotiStudentai.begin(), surusiuotiStudentai.end(), rusiuoti);

    out << fixed << setprecision(2);
    out << "Studentų galutiniai balai:\n";
    out << "----------------------------------------------------------------\n";
    out << left << setw(15) << "Vardas" << setw(15) << "Pavarde" << setw(20) << "Galutinis (Vid.)" << setw(20) << "Galutinis (Med.)\n";
    out << "----------------------------------------------------------------\n";

    for (const Studentas& studentas : surusiuotiStudentai) {
        double galutinisVidurkis = 0.4 * skaiciuotiVidurki(studentas.namuDarbai) + 0.6 * studentas.egzaminas;
        double galutineMediana = 0.4 * skaiciuotiMediana(studentas.namuDarbai) + 0.6 * studentas.egzaminas;
        out << left << setw(15) << studentas.vardas << setw(15) << studentas.pavarde << setw(20) << galutinisVidurkis << setw(20) << galutineMediana << "\n";
    }
    out << "----------------------------------------------------------------\n";

    if (!isvedimoFailas.empty()) {
        delete &out;
    }
}


int main()
{
    srand(static_cast <unsigned int>(time(nullptr)));

    vector<Studentas> studentai; ///studentu duomenys
    char testi;
    int meniu = 0;

    do
    {
        cout << "Pasirinkite buda:\n"
             << "1 - ivesti studentu duomenis rankiniu budu \n"
             << "2 - sugeneruoti pazymius \n"
             << "3 - generuoti ir pazymius ir studentu vardus, pavardes \n"
             << "4 - baigti darba \n" ;
        cin >> meniu;


        switch(meniu)
        {
        case 1:
        {
            do
            {
                Studentas studentas;

                cout << "Iveskite studento varda: ";
                cin >> studentas.vardas;

                cout << "Iveskite studento pavarde: ";
                cin >> studentas.pavarde;

                studentas.namuDarbai.clear(); /// Isvalome namų darbu pazymiu vektoriu

                int pazymys;
                cout << "Iveskite namu darbu rezultatus (iveskite -1 jei baigete ivedima): ";
                int k=1;

                while(true)
                {
                    cout << k << "-asis pazymys: ";
                    if(cin >> pazymys && pazymys != -1)
                    {
                        studentas.namuDarbai.push_back(pazymys);
                        k++;
                    }
                    else if (pazymys==-1)
                        break;
                    else
                    {
                        cin.clear();
                        cin.ignore(80,'\n');
                        cout << "Neteisingas ivedimas. Iveskite teisinga skaiciu" << endl;
                    }
                }

                cout << "Iveskite egzamino rezultata: ";
                cin >> studentas.egzaminas;

                studentai.push_back(studentas);

                cout << "Ar norite vesti dar vieno studento duomenis? (t/n): ";
                cin >> testi;
            }

            while (testi == 't');

            cout << endl << "Pasirinkite skaiciavimo buda: " << endl;
            cout << "1 - Vidurkis" << endl;
            cout << "2 - Mediana" << endl;
            int pasirinkimas;
            cin >> pasirinkimas;
            while(pasirinkimas!=1 && pasirinkimas!=2)
            {
                cout << "Iveskite teisinga pasirinkima: " ;
                cin.clear();
                cin.ignore(80,'\n');
            }

            bool naudotiVidurki = (pasirinkimas == 1); /// Jei pasirinkimas = 1, naudosime vidurkį, kitu atveju medianą

            cout << setw(13) << left << "Vardas" << setw(13) << left << "Pavarde" << setw(13) << left << "Galutinis (vid./med.)" << endl;
            cout << "----------------------------------------------------------------------" <<endl;
            for (size_t i=0; i<studentai.size(); i++) // Changed int to size_t
            {
                double galutinis = skaiciuotiGalutini(studentai[i].namuDarbai, studentai[i].egzaminas, naudotiVidurki);
                cout << setw(13) << left << studentai[i].vardas << setw(13) << left << studentai[i].pavarde << setw(13) << left << fixed << setprecision(2) << galutinis << endl;
            }
            break;
        }
        case 2:
{
    nuskaitymas(studentai, "kursiokai.txt"); // Nuskaitomas failas su studentų duomenimis

    spausdinimas(studentai, "isvedimas.txt");
}
    break;
}


        case 3:
        {
            for (int i=0; i<6; i++)
            {
                Studentas naujasStudentas;
                atsitiktiniaiStudentai(naujasStudentas);
                studentai.push_back(naujasStudentas);
                cout << "Naujas Studentas: " << naujasStudentas.vardas << " " << naujasStudentas.pavarde << "\nEgzaminas: " << naujasStudentas.egzaminas << "\nNamu darbu pazymiai: ";
                for (int pazymys : naujasStudentas.namuDarbai)
                {
                    cout << pazymys << " ";
                }
                cout << "\n\n";
            }
            break;
        }
        case 4:
            break;
        }
    }
    while (meniu != 4);

    return 0;
}

